/
Introduction to Computing
In this course, students learn computational problem-solving techniques through the process of design, implementation, testing, and documentation using the programming language Python. The main ideas of computing are explored and students learn the most essential information about computers and technology in today's digital world and the latest computing trends and skills. 
/
Fundamentals of Engineering
This course provides core engineering knowledge and competencies in a highly interactive class format. Topics include professional skills such as technical writing and presentation, guidelines for professional engineering practice, and career preparation. Introduction to the fields, roles, and industries of engineering also serves as a basis for selection of engineering major field. 
/
Calculus I 
This course covers analytic geometry, continuous functions, derivatives of algebraic and trigonometric functions, product and chain rules, implicit functions, extrema and curve sketching, indefinite and definite integrals, applications of derivatives and integrals, exponential, logarithmic and inverse trig functions, hyperbolic trig functions, and their derivatives and integrals.
/
Fundamentals of Programming	
This course introduces programming constructs and techniques in a logical progression beginning with small problems and basic algorithms through larger scale programs and design. While not an object oriented course, classes and objects are used in an ancillary capacity while working on broader topics of software architecture. 
/
Introduction to Rhetoric and Composition	
This course introduces students to the academic discipline of rhetoric and composition. Students read nonfiction texts, including rhetoric and composition and cross-disciplinary scholarship, in order to analyze their conventions and craft texts in various genres and modalities for a range of audiences.
/
Calculus II 
This course covers applications of the integral to area, arc length, and volumes of revolution; integration by substitution and by parts; indeterminate forms and improper integrals: Infinite sequences and infinite series, tests for convergence, power series, and Taylor series; geometry in three-space. 
/
Introduction to Philosophy
This course is a topical introduction to philosophy. The aim of the course is to introduce students to the vocation of wonder and questioning by engaging students in discussions about some of the basic questions of philosophy.
/
Programming Workshop	
This course covers advanced programming concepts in one or more current programming languages, including syntax and theories. It prepares students for adapting to various programming environments and coding in an efficient manner.
/
Programming Workshop Lab	
This lab accompanies the Programming Workshop course for hands-on practice with course concepts. 
/
Computer Science Sophomore Clinic	
This sophomore clinic provides faculty guidance and supervision beyond the scope of existing courses. Students learn how to develop and structure their deliverables, as well as how to use computer science tools in the context of real-world or research projects.
/
Web Development	
This course introduces the student to developing applications for use on the World Wide Web. Students learn basic n-tier concepts for designing distributed applications and gain hands on experience through the construction of Web-based applications. The course covers concepts that allow communication over the Web. This includes designing and authoring Web pages, markup languages, the client-side document object model, usability, search engine optimization, and client-side dynamic Web pages.
/
Discrete Mathematics
Topics in this course include logic, sets, functions, equivalence relations and partitions, mathematical induction, and countability.
/
Digital Design I	
An introduction to computer hardware design. Topics include: digital design principles, Boolean algebra, combinational logic design, sequential logic design, registers, counters, memory, multiplexers, finite state machines, radix conversion, and programmable logic devices. 
/
Digital Design I Lab	
This lab course covers the practical aspects of digital logic design.
/
Data Structures	
This course covers abstract data structures such as queues, stacks, heaps, linked lists, trees, graphs, hash tables, and sorting. 
/
Data Structures Lab
This lab accompanies the Data Structures course for hands-on practice with course concepts. 
/
Computer Systems Architecture	
This course introduces the machine language and various components of a computer hardware in modern computer systems. The course focuses on CPU, memory, bus, cache, I/O module, internal data representation, and instruction set design. It also covers pipelining, superscalar architecture, reduced instruction set computers, parallel architectures, and interconnection networks. 
/
Design and Analysis of Algorithms	
This course introduces various algorithms and analyzes the complexity and efficiency of the algorithms. Topics cover classic and heuristic algorithms, searching, sorting and parsing techniques, and algorithm complexity analysis.
/
Computer Science Junior Clinic I	
This first junior clinic provides faculty guidance and supervision beyond the scope of existing courses. Students learn how to develop and structure their deliverables, as well as how to use computer science tools in the context of real-world or research projects. 
/
Software Engineering Methods
This course explores the requirements gathering, system analysis, and software design methods of software application following the software processes required for the production of high quality software. Techniques for creating documentation and using software development tools will be presented. Students will gain experience in software project management, requirements, analysis, and safety issues in software development, interpersonal skills for management and team membership, and the software engineering discernment of systems architecture.
/
Introduction to Cybersecurity	
In this course, students will be given an extensive overview of the various components of cybersecurity, including software development, operating systems, databases, and networks. Students will learn cybersecurity concepts, issues, and tools that are critical in solving problems in the computing security domain. The course will use lectures, reading assignments, and interactive lab exercises to reinforce the concepts that are introduced. 
/
Computer Science Junior Clinic II	
This second junior clinic provides faculty guidance and supervision beyond the scope of existing courses. Students learn how to develop and structure their deliverables, as well as how to use computer science tools in the context of real-world or research projects. 
/
Theory of Programming Languages	
Topics in this course include the design of programming languages; organization, control structures, data structures; run time behavior of programs; and formal specification and analysis of programming languages. The course includes a comparative survey of several significantly different languages. 
/
Software Design Methods
Through the use of case studies and project work that has the student gradually building a large design specification, students will achieve an understanding of how complex applications are designed and built. 
/
Senior Design Project I
In this capstone course, students work in teams on advanced projects that emphasize engineering design with due attention to design constraints and engineering standards. The overarching scope of this course is to transform engineering students to practicing engineers. 
/
Senior Design Project II
In this capstone course, students work in teams on advanced projects that emphasize engineering design with due attention to design constraints and engineering standards. The overarching scope of this course is to transform engineering students to practicing engineers. Under the guidance of a faculty instructor and a mentor, each team conducts literature searches, write a technical proposal and its members develop skills in information analysis and synthesis; they model and test prototypes of their devices, and make frequent oral and poster presentations of their work to faculty and peers, and submit timely progress reports.
/
Agile Software Engineering
In this course, students apply in-depth techniques and experience various roles incorporated into one of the main approaches to software development which is agile methodology. It uses detailed knowledge about each of the major traditional software engineering phases to explore a more iterative approach for development of faster and more adaptable software. 
/
Software Testing and Maintenance
This course will cover in-depth methods for software testing, reliability and maintenance of software. Students will learn the principles of software testing and how to apply software testing techniques to the development of quality software and how to deploy software systems, maintain, enhance, and reuse software systems. 
/
Special Topics
This course provides an in-depth study of selected topics in software engineering of particular interest to the students and instructor. The course is counted as a major elective/specialization course. 
/
Computational Biology
This course is designed to benefit computational and experimental biologists to understand the principles of analyzing biological data, building models and testing hypotheses using computer science paradigms. Students will learn how to build computational tools that are used to analyze DNA content, identify protein binding patterns, compare sequences, and discover variation within genomes.
/
General Biology I Lab
General Biology I Lab
/
General Biology II Lab
General Biology II Lab
/
Precalculus
Topics in this course include: algebra; linear, rational, exponential, logarithmic and trigonometric functions from a descriptive, algebraic, numerical and graphical point of view; limits and continuity. Primary emphasis is on techniques needed for calculus. 
/
Religion and the Critical Mind
This course examines some of the themes in the study of religion and offers a comparative analysis of the nature, function, and purpose of religion as found in a variety of models of religion. A wide variety of contemporary religious practices will serve as discussion points for scholarly analysis. 
/
Origins of the Modern World Since 1500
This course, which examines the history of Europe and its relationship to the world from the end of the Middle Ages through the 19th century, emphasizes the cultural, social, economic, and political forces and structures that led to the development of commercial and industrial capitalism, and the effects of this development on Europe, the New World, Asia, and Africa. 
/
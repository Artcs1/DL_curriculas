/
Composition and Rhetoric
The first of two courses in college-level writing skills. Focuses on writing essays using various rhetorical modes: persuasion, description, comparison and analysis. Presents basic methods of library research, as well as the MLA documentation system. Students write one research paper and several essays.
/
Fundamentals of Software Development 1
Introduces software development as it applies to small programs. Students learn to program in a higher-level language and to read, understand, write and evolve typical small higher-level programs.
/
Computing Disciplines and Careers 1
Overviews computing-related disciplines and professional careers. Includes an overview of software engineering and computer science. Introduces the ethical, moral and legal implications of crafting software.
/
Applied Discrete Mathematics
Topics include positional and modular number systems, relations and their graphs, discrete functions, set theory, propositional and predicate logic, sequences, summations, mathematical induction and proofs by contradiction.
/
University Experience
Assists new incoming students during their initial academic and social transitions to the university. Aims to promote student success by providing information about campus and academic resources, and encouraging participation in the classroom and in the campus community.
/
Calculus 1
Functions and graphs, limits and continuity, derivatives of algebraic and trigonometric functions, chain rule; applications to maxima and minima, and to related rates. Exponential logarithmic, circular and hyperbolic functions: their inverses, derivatives and integrals.
/
Writing About Literature
The second of two courses in college-level writing skills. Focuses on reading and analyzing poems, plays and short works of fiction. Students write several essays and one research paper on literary topics.
/
Fundamentals of Software Development 2
Introduces the basic data structures and algorithms used in software design and implementation. Includes sorting and searching techniques.
/
Computer Organization and Machine Programming
Introduces digital logic, computer arithmetic, instruction sets and the basic components of computer architecture. Covers arithmetic/logic, control, memory and input/output units. Explores the relationship between computer architecture and machine language programming. Requires students to write programs in Intel assembly language.
/
Calculus 2
Integration and applications of integration, further techniques of integration, improper integrals, limits, l’Hospital’s rule, sequences and series, numerical methods, polar coordinates and introductory differential equations.
/
Scientific and Technical Communication
Practice in the technical and scientific writing style and format, including gathering and using data to prepare reports. Includes abstracts, reports, letters, technical descriptions, proposals and at least two oral presentations.
/
Algorithms and Data Structures
to include algorithms and data structures fundamental to software systems development. Includes abstraction, recursion, algorithm design and complexity analysis, linked lists, stacks, queues, trees, and sorting and searching methods.
/
British Literature and Culture
Emphasizes the interpretation of texts that represent the development of a British literary tradition and culture from its origins to the Restoration.
/
British and American Literature 2
Surveys British and American literature in the 20th and 21st centuries, from World War I to the present. Emphasizes the interpretation of texts that represent the development of the modern world and modern selves.
/
Programming in a Second Language
Introduces a second programming language for computer science majors. Students learn to read and write programs in a second language. The language chosen is one with wide popularity and use. The current language is C++.
/
Applied Statistics
Includes probability and sample space concepts, discrete and continuous random variables, moments of random variables, covariance, correlation, generating functions, conditional probability, independence, introduction to statistics, confidence intervals, hypothesis tests, chi-square tests, linear regression and non-linear regression.
/
Introduction to Software Engineering
Presents a basis for the integration of engineering rigor and software development. Students are shown a practical yet rigorous method of going from a problem concept to a software solution. Includes requirements specification, functional specification and coding techniques using information hiding and stepwise refinement.
/
Introduction to Linear Algebra
Includes vectors and matrices, linear equations, vector spaces and subspaces, orthogonality, determinants, eigenvalues and eigenvectors, and linear transformations. Introduces students to solution and manipulation of matrix equations using a standard package of mathematical software.
/
Software Testing 1
Explores functional (black box) methods for testing software systems, reporting problems effectively and planning testing projects. Students apply what they have learned throughout the course to a sample application that is commercially available or under development. The choice of sample application changes from term to term.
/
Human-Computer Interaction
Introduces the methods and principles of human-computer interaction throughout the software development life cycle. Topics include user-centered design, prototyping, modeling interaction, cognitive models and socio-organizational issues.
/
Operating Systems Concepts
Examines the design and implementation of operating systems. Includes process, storage and recovery management. Explores issues involved in moving from single-user systems to multitasking, multiprocessing and multiprocessor systems
/
Requirements Engineering
Studies in depth software requirements engineering tools and techniques. Includes gathering user requirements, formal specification of system behavior, system interfaces, end user and system documentation and validation techniques. Emphasizes the end-user aspect of gathering and formalizing user expectations.
/
Junior Project
Introduces the concepts and methodology of software project development. Forms teams and develops team proposals for capstone design projects that will be implemented during the senior year. Allows juniors to interact with seniors completing capstone design projects.
/
Software Design Methods
Explores methods for the design of software systems. Includes formal specifications of software behavior, object-oriented analysis/design and structured analysis/design.
/
Formal Languages and Automata Theory
Presents abstract models of computers (finite automata, pushdown automata and Turing machines) and the language classes they recognize or generate (regular, context-free and recursively enumerable). Also presents applications of these models to compiler design, algorithms and complexity theory.
/
Software Maintenance and Evolution
Introduces the methods, principles and practices of software maintenance and evolution. Topics include program slicing, reusable components, refactoring, regression testing, program comprehension, reverse engineering and impact analysis.
/
Software Development Projects 1
A two-semester, senior-year project sequence that serves as the capstone for the project-intensive courses in software engineering. Students team to implement a software project from conception to completion.
/
Programming Language Concepts
Surveys programming language concepts and design principles of programming paradigms (procedural, functional and logic). Includes a history of programming languages, data types supported, control structures and run-time management of dynamic structures.
/
Software Project Management
Introduces project management issues that are typical of large software projects. Includes project planning, estimation, modeling, measurement and assessment techniques. Surveys software project management tools. Overviews the key CMM process areas for project management.
/
Software Development Projects 2
A two-semester, senior-year project sequence that serves as the capstone for the project-intensive courses in software engineering. Students team to implement a software project from conception to completion.
/
Formal Methods
Introduces the use of mathematical models of software systems for their specification and validation. Includes finite state machine models, models of concurrent systems, verification of models, and limitations of these techniques.
/
Physics 1
Includes vectors; mechanics of particles; Newton’s laws of motion; work, energy and power; impulse and momentum; conservation laws; mechanics of rigid bodies, rotation, equilibrium; fluids, heat and thermodynamics; and periodic motion.
/
General Chemistry 1
Covers fundamental principles of modern chemistry, including stoichiometry, properties of gases, liquids and solids, thermochemistry, atomic structure, properties of solutions and equilibrium. Includes lab component.
/
Physics 2
Includes electricity and magnetism, Coulomb’s law, electric fields, potential capacitance, resistance, DC circuits, magnetic fields, fields due to currents, induction, magnetic properties; and wave motion, vibration and sound, interference and diffraction.
/
Introduction to Biodiversity and Physiology
Provides a hands-on approach to teaching concepts of biodiversity and physiology.
/


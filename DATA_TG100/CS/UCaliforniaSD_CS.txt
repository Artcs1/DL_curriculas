Introduction to Computer Science: Java
Continuation of the Java language and of programming techniques. More on Inheritance. Exception handling.  
/
Introduction to Computer Science and Object-Oriented Programming: Java
Introduction to computer science and programming using the Java language. Basic UNIX. Modularity and abstraction. Documentation, testing and verification techniques. Basic object-oriented programming including inheritance and dynamic binding. Exception handling. Event driven programming. Experience with AWT library or other similar library.
/
Basic Data Structures and Object-Oriented Design
Use and implementation of basic data structures including linked lists, stacks, and queues. Use of advanced structures such as binary trees and hash tables. Object-oriented design including interfaces, polymorphism, encapsulation, abstract data types, pre-/post-conditions. Recursion. Uses Java and Java Collections. 
/
Software Tools and Techniques Laboratory
Hands on exploration of software development tools and techniques.  Investigation of the scientific process as applied to the development and debugging of programs. Introduction to and practice with specific software tools and techniques to aid in coherent software development processes. Emphasis is on weekly hands-on laboratory experiences including pre- and post-lab work, development of laboratory notebooking techniques as applied to software design.
/
Introduction to Discrete Mathematics
Basic discrete mathematical structures: sets, relations, functions, sequences, equivalence relations, partial orders, number systems. Methods of reasoning and proofs: prepositional logic, predicate logic, induction, recursion, pigeonhold principle. Infinite sets and diagonalization. Basic counting techniques; permutation and combinations. Applications will be given to digital logic design, elementary number theory, design of programs, and proofs of program correctness.
/
Mathematics for Algorithm and Systems
This course will provide an introduction to the discrete mathematical tools needed to analyze algorithms and systems. Enumerative combinatorics: basic counting principles, inclusion-exclusion, and generating functions. Matrix notation. Applied discrete probability. Finite automata.
/
Computer Organization and Systems Programming
Introduction to organization of modern digital computers - understanding the various components of a computer and their interrelationships. Study of a specific architecture/machine with emphasis on systems programming in C and Assembly languages in a UNIX environment.
/
Introduction to Discrete Mathematics
Basic discrete mathematical structure: sets, relations, functions, sequences, equivalence relations, partial orders, and number systems. Methods of reasoning and proofs: propositional logic, predicate logic, induction, recursion, and pigeonhole principle. Infinite sets and diagonalization. Basic counting techniques; permutation and combinations. Applications will be given to digital logic design, elementary number theory, design of programs, and proofs of program correctness
/
Fluency in Information Technology
Introduces the concepts and skills necessary to effectively use information technology. Includes basic concepts and some practical skills with computers and networks.
/
Mathematical Beauty in Rome
Exploration of topics in computing, engineering, and mathematics, applied to classical architecture in Rome, Italy. In-depth geometrical analysis and computer modeling of basic structures (arches, vaults, domes), and on-site studies of the Colosseum, Pantheon, Roman Forum, and St. Peter's Basilica. Concurrent enrollment required in 4GS and 6GS.
/
Introduction to Programming I
Introduction to algorithms and top-down problem solving. Introduction to the C language, including functions, arrays, and standard libraries. Basic skills for using a PC graphical user interface operating system environment. File maintenance utilities are covered.
/
Mathematical Beauty in Rome Lab
Companion course to CSE 4GS where theory is applied and lab experiments are carried out "in the field" in Rome, Italy. For final projects, students will select a complex structure (e.g., the Colosseum, the Pantheon, St. Peter's, etc.) to analyze and model, in detail, using computer-based tools. Concurrent enrollment required in 4GS and 6GS.
/
Matlab Programming for Engineering Analysis
Computer programming in Matlab with elementary numerical analysis of engineering problems. Arithmetic and logical operations, arrays, graphical presentation of computations, symbolic mathematics, solutions of equations, and introduction to data structures.
/
Thermodynamics
Fundamentals of engineering thermodynamics: energy, work, heat, properties of pure substances, first and second laws for closed systems and control volumes, gas mixtures. Application to engineering systems, power and refrigeration cycles, combustion
/
Cognitive Consequences of Technology
This course examines the interrelationships of cognition and technology from the perspective of cognitive science. We address questions of importance for our increasingly technological society: How does technology shape our minds? How should what we know about our minds shape technology?
/
Introduction to Python 
This class will teach fundamental Python programming skills and practices, including the “Zen of Python.” Students will focus on scientific computing and learn to write functions and tests, as well as how to debug code using the Jupyter Notebook programming environment.
/
Engineering Computation
Students learn the C programming language with an emphasis on high-performance numerical computation. The commonality across programming languages of control structures, data structures, and I/O is also covered. Techniques for using Matlab to graph the results of C computations are developed.
/
UNIX Lab
The objective of the course is to help the programmer create a productive UNIX environment. Topics include customizing the shell, file system, shell programming, process management, and UNIX tools
/
C++ for Java Programmers
Helps the Java programmer to be productive in the C++ programming environment. Topics include the similarities and differences between Java and C++ with special attention to pointers, operator overloading, templates, the STL, the preprocessor, and the C++ Runtime Environment.
/
Undergraduate Seminar
A seminar providing an overview of a topic of current research interest to the instructor. The goal is to present a specialized topic in computer science and engineering students. May be taken for credit three times when topics vary. 
/
Perspectives in Computer Science and Engineering
A seminar format discussion led by CSE faculty on topics in central areas of computer science, concentrating on the relation among them, recent developments, and future directions.
/
Independent Study in Computer Science and Engineering
Independent reading or research by special arrangement with a faculty member.
/
Calculus for Science and Engineering I
Foundations of differential and integral calculus of one variable. Functions, graphs, continuity, limits, derivative, tangent line. Applications with algebraic, exponential, logarithmic, and trigonometric functions. Introduction to the integral.
/
Calculus for Science and Engineering II
Integral calculus of one variable and its applications, with exponential, logarithmic, hyperbolic, and trigonometric functions. Methods of integration. Infinite series. Polar coordinates in the plane and complex exponentials. 
/
Calculus and Analytic Geometry for Science and Engineering
Vector geometry, vector functions and their derivatives. Partial differentiation. Maxima and minima. Double integration.
/
Introduction to Differential Equations
Ordinary differential equations: exact, separable, and linear; constant coefficients, undetermined coefficients, variations of parameters. Systems. Series solutions. Laplace transforms. Techniques for engineering sciences. Computing symbolic and graphical solutions using Matlab
/
Linear Algebra
Matrix algebra, Gaussian elimination, determinants. Linear and affine subspaces, bases of Euclidean spaces. Eigenvalues and eigenvectors, quadratic forms, orthogonal matrices, diagonalization of symmetric matrices. Applications. Computing symbolic and graphical solutions using Matlab.
/
Physics—Mechanics
A calculus-based science-engineering general physics course covering vectors, motion in one and two dimensions, Newton’s first and second laws, work and energy, conservation of energy, linear momentum, collisions, rotational kinematics, rotational dynamics, equilibrium of rigid bodies, oscillations, gravitation. 
/
Physics—Electricity and Magnetism
Continuation of Physics 2A covering charge and matter, the electric field, Gauss’s law, electric potential, capacitors and dielectrics, current and resistance, electromotive force and circuits, the magnetic field, Ampere’s law, Faraday’s law, inductance, electromagnetic oscillations, alternating currents and Maxwell’s equations.
/
Physics for Physics Majors—Mechanics
The first quarter of a five-quarter calculus-based physics sequence for physics majors and students with a serious interest in physics. The topics covered are vectors, particle kinematics and dynamics, work and energy, conservation of energy, conservation of momentum, collisions, rotational kinematics and dynamics, equilibrium of rigid bodies.
/
Physics for Physics Majors—Fluids, Waves, and Heat
Continuation of Physics 4A covering oscillations, gravity, fluid statics and dynamics, waves in elastic media, sound waves, heat and the first law of thermodynamics, kinetic theory of gases, second law of thermodynamics, gaseous mixtures and chemical reactions.
/
General Chemistry I
First quarter of a three-quarter sequence intended for science and engineering majors. Topics include: atomic theory, bonding, molecular geometry, stoichiometry, types of reactions, and thermochemistry.
/
Honors General Chemistry I
First quarter of a three-quarter honors sequence intended for well-prepared science and engineering majors. Topics include quantum mechanics, molecular orbital theory, and bonding. An understanding of nomenclature, stoichiometry, and other fundamentals is assumed
/
General Chemistry II
Second quarter of a three-quarter sequence intended for science and engineering majors. Topics include: covalent bonding, gases, liquids, and solids, colligative properties, physical and chemical equilibria, acids and bases, solubility.
/
Honors General Chemistry II
Second quarter of a three-quarter honors sequence intended for well-prepared science and engineering majors. Topics include: colligative properties, bulk material properties, chemical equilibrium, acids and bases, and thermodynamics. 
/
The Cell
An introduction to cellular structure and function, to biological molecules, bioenergetics, to the genetics of both prokaryotic and eukaryotic organisms, and to the elements of molecular biology.
/
Multicellular Life
An introduction to the development and the physiological processes of plants and animals. Included are treatments of reproduction, nutrition, respiration, transport systems, regulation of the internal environment, the nervous system, and behavior
/
Organismic and Evolutionary Biology
The first principles of evolutionary theory, classification, ecology, and behavior; a phylogenetic synopsis of the major groups of organisms from viruses to primates.
/
Statistical Methods
Introduction to probability. Discrete and continuous random variables–binomial, Poisson and Gaussian distributions. Central limit theorem. Data analysis and inferential statistics: graphical techniques, confidence intervals, hypothesis tests, curve fitting.
/
Econometrics A
Probability and statistics used in economics. Probability and sampling theory, statistical inference, and use of spreadsheets.
/
Engineering Probability and Statistics
Axioms of probability, conditional probability, theorem of total probability, random variables, densities, expected values, characteristic functions, transformation of random variables, central limit theorem. Random number generation, engineering reliability, elements of estimation, random sampling, sampling distributions, tests for hypothesis.
/
A Practical Introduction to Probability and Statistics
Distributions over the real line. Independence, expectation, conditional expectation, mean, variance. Hypothesis testing. Learning classifiers. Distributions over R^n, covariance matrix. Binomial, Poisson distributions. Chernoff bound. Entropy. Compression. Arithmetic coding. Maximal likelihood estimation. Bayesian estimation
/
Advanced Data Structures
High-performance data structures and supporting algorithms. Use and implementation of data structures like (un)balanced trees, graphs, priority queues, and hash tables. Also memory management, pointers, recursion. Theoretical and practical performance analysis, both average case and amortized. Uses C++ and STL
/
Design and Analysis of Algorithms 
Design and analysis of efficient algorithms with emphasis of nonnumerical algorithms such as sorting, searching, pattern matching, and graph and network algorithms. Measuring complexity of algorithms, time and storage. NP-complete problems
/
Theory of Computability
An introduction to the mathematical theory of computability. Formal languages. Finite automata and regular expression. Push-down automata and context-free languages. Computable or recursive functions: Turing machines, the halting problem
/
Software Engineering
Introduction to software development and engineering methods, including specification, design, implementation, testing, and process. An emphasis on team development, agile methods, and use of tools such as IDE’s, version control, and test harnesses.
/
Principles of Computer Operating Systems
Basic functions of operating systems; basic kernel structure, concurrency, memory management, virtual memory, file systems, process scheduling, security and protection
/
Computer Networks
Introduction to concepts, principles, and practice of computer communication networks with examples from existing architectures, protocols, and standards with special emphasis on the internet protocols. Layering and the OSI model; physical and data link layers; local and wide area networks; datagrams and virtual circuits; routing and congestion control; internetworking. Transport protocols.
/
Networked Services
The architecture of modern networked services, including data center design, enterprise storage, fault tolerance, and load balancing. Protocol software structuring, the Transmission Control Protocol (TCP), remote procedure calls, protocols for digital audio and video communication, overlay and peer-to-peer systems, secure communication.
/
Programming Languages: Principles and Paradigms
Introduction to programming languages and paradigms, the components that comprise them, and the principles of language design, all through the analysis and comparison of a variety of languages (e.g., Pascal, Ada, C++, PROLOG, ML.) Will involve programming in most languages studied. 
/
Database System Principles
Basic concepts of databases, including data modeling, relational databases, query languages, optimization, dependencies, schema design, and concurrency control. Exposure to one or several commercial database systems. Advanced topics such as deductive and object-oriented databases, time allowing.
/
Introduction to Modern Cryptography
Topics include private and public-key cryptography, block ciphers, data encryption, authentication, key distribution and certification, pseudorandom number generators, design and analysis of protocols, zero-knowledge proofs, and advanced protocols. Emphasizes rigorous mathematical approach including formal definitions of security goals and proofs of protocol security.
/
Introduction to Computer Security
Topics include basic cryptography, security/threat analysis, access control, auditing, security models, distributed systems security, and theory behind common attack and defense techniques. The class will go over formal models as well as the bits and bytes of security exploits.
/
Introduction to Artificial Intelligence: Probabilistic Reasoning and Decision-Making
Introduction to probabilistic models at the heart of modern artificial intelligence. Specific topics to be covered include probabilistic methods for reasoning and decision-making under uncertainty; inference and learning in Bayesian networks; prediction and planning in Markov decision processes; applications to intelligent systems, speech and natural language processing, information retrieval, and robotics.
/
Introduction to Artificial Intelligence: Search and Reasoning
The course will introduce important ideas and algorithms in search and reasoning, and demonstrate how they are used in practical AI applications. Topics include A* search, adversarial search, Monte Carlo tree search, reinforcement learning, constraint solving and optimization, propositional and first-order reasoning. 
/
Introduction to Artificial Intelligence: Statistical Approaches
Reasoning with probabilities, reasoning and learning with Bayesian networks, decision making under uncertainty, sequential decision making, statistical learning methods, and reinforcement learning
/
Introduction to Computer Vision
The goal of computer vision is to compute scene and object properties from images and video. This introductory course includes feature detection, image segmentation, motion estimation, object recognition, and 3-D shape reconstruction through stereo, photometric stereo, and structure from motion
/
Deep Learning
This course covers the fundamentals of neural networks: we introduce linear regression, logistic regression, perceptrons, multilayer networks and back-propagation, convolutional neural networks, recurrent networks, and deep networks trained by reinforcement learning.
/
Statistical Natural Language Processing
Natural language processing (NLP) is a field of AI which aims to equip computers with the ability to intelligently process natural (human) language. This course will explore statistical techniques for the automatic analysis of natural language data. Specific topics covered include probabilistic language models, which define probability distributions over text passages; text classification; sequence models; parsing sentences into syntactic representations; and machine translation. 
/
Computer Graphics
Representation and manipulation of pictorial data. Two-dimensional and three-dimensional transformations, curves, surfaces. Projection, illumination, and shading models. Raster and vector graphic I/O devices; retained-mode and immediate-mode graphics software systems and applications
/
Components and Design Techniques for Digital Systems
Design of Boolean logic and finite state machines; two-level, multilevel combinational logic design, combinational modules and modular networks, Mealy and Moore machines, analysis and synthesis of canonical forms, sequential modules.
/
Digital Systems Laboratory
Implementation with computer-aided design tools for combinational logic minimization and state machine synthesis. Hardware construction of a small digital system
/
Introduction to Computer Architecture
Introduction to computer architecture. Computer system design. Processor design. Control design. Memory systems.
/
Project in Computer Architecture
Hands-on computer architecture project aiming to familiarize students with instruction set architecture, and design of process. Control and memory systems. 
/
Seminar in CSE
A seminar course on topics of current interest. Students, as well as, the instructor will be actively involved in running the course/class.
/
Senior Seminar in Computer Science and Engineering
The Senior Seminar Program is designed to allow senior undergraduates to meet with faculty members in a small group setting to explore an intellectual topic in CSE (at the upper-division level).
/
Introduction to Computer Science Research
Introduction to research in computer science. Topics include defining a CS research problem, finding and reading technical papers, oral communication, technical writing, and independent learning.
/
Teaching (4)
Teaching and tutorial assistance in a CSE course under the supervision of the instructor.
/	
Field Study in Computer Science and Engineering
Directed study and research at laboratories away from the campus.
/
Directed Group Study
Computer science and engineering topics whose study involves reading and discussion by a small group of students under the supervision of a faculty member.
/



